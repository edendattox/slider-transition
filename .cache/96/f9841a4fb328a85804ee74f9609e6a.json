{"id":"js/shaders/vertex.glsl","dependencies":[{"name":"E:\\three.js-stuff\\6 - slider\\package.json","includedInParent":true,"mtime":1621750794010}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform vec2 pixels;\\nvarying float vNoise;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec2 vScreenSpace;\\nvarying vec3 vViewDirection;\\nfloat PI = 3.141592653589793238;\\n\\nvoid main() {\\n   \\n    vUv = uv;\\n    vPosition = position;\\n    vNormal = normalize(mat3(modelMatrix)* normal);\\n\\n    vec3 worldPosition =( modelMatrix*vec4(position, 1.0)).xyz;\\n    vViewDirection = normalize(worldPosition - cameraPosition);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n     \\n    //  object size\\n    vScreenSpace = gl_Position.xy/gl_Position.w;\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shaders/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shaders/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shaders/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shaders/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shaders/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":672},"source":"js/shaders/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"js/shaders/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform vec2 pixels;\\nvarying float vNoise;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec2 vScreenSpace;\\nvarying vec3 vViewDirection;\\nfloat PI = 3.141592653589793238;\\n\\nvoid main() {\\n   \\n    vUv = uv;\\n    vPosition = position;\\n    vNormal = normalize(mat3(modelMatrix)* normal);\\n\\n    vec3 worldPosition =( modelMatrix*vec4(position, 1.0)).xyz;\\n    vViewDirection = normalize(worldPosition - cameraPosition);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n     \\n    //  object size\\n    vScreenSpace = gl_Position.xy/gl_Position.w;\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"c85b3e41f7295ffba62d37094e5d5097","cacheData":{"env":{}}}